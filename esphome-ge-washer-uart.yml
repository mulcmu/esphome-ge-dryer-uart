substitutions:
  name: washer
  upper_name: Washer
  init: 'component_geUART::instance(id(uart_bus));'

esphome:
  name: washer
  platform: esp32
  board: nodemcu-32s
  includes:
    - esphome-ge-washer-uart.h
  
logger:
  baud_rate: 115200

# Enable Home Assistant API
api:

ota:
  password: !secret esp_home_ota_pw

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  # Optional manual IP
 # manual_ip:
 #   static_ip: 192.168.0.192
 #   gateway: 192.168.0.9
 #   subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  #ap:
  #  ssid: ${upper_name} Fallback Hotspot
  #  password: !secret esp_home_captive_pw

#captive_portal:

# Sync time with Home Assistant.
time:
  - platform: homeassistant
    id: homeassistant_time

uart:
  - id: uart_bus
    tx_pin: 
      number: GPIO17
      inverted: false
    rx_pin: 
      number: GPIO16
      inverted: false
    baud_rate: 230400
    debug:
      direction: BOTH
      after:
          timeout: 50ms
      sequence:
        - lambda:  UARTDebug::log_hex(direction, bytes, ' ');
        
custom_component:
  - lambda: |-
      auto c_ge_uart = ${init}
      return {c_ge_uart};


sensor:
  # Uptime sensor.
  - platform: uptime
    name: ${upper_name} Uptime

  # WiFi Signal sensor.
  - platform: wifi_signal
    name: ${upper_name} WiFi Signal
    update_interval: 60s
  - platform: custom
    lambda: |-
      auto c_ge_uart = ${init}
      return {
        c_ge_uart->sensor_remainingTime,
        c_ge_uart->sensor_cycleCount
      };
    sensors:
      - name: ${upper_name} Time Remaining
        unit_of_measurement: min
        accuracy_decimals: 1
        icon: mdi:progress-clock
      - name: ${upper_name} Cycle Count
        accuracy_decimals: 0
        icon: mdi:progress-clock

# Text sensors with general information.
text_sensor:
  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: ${upper_name} IP
  - platform: custom
    lambda: |-
        auto c_ge_uart = ${init}
        return {
          c_ge_uart->textsensor_State,
          c_ge_uart->textsensor_Cycle,
          c_ge_uart->textsensor_SubState,
          c_ge_uart->textsensor_endOfCycle,
          c_ge_uart->textsensor_SoilSetting, 
          c_ge_uart->textsensor_TempSetting, 
          c_ge_uart->textsensor_SpinSetting, 
          c_ge_uart->textsensor_RinseSetting,
          c_ge_uart->textsensor_Door, 
          c_ge_uart->textsensor_DoorLock
          };
          
          
    text_sensors:
        - name: ${upper_name} State
          icon: mdi:washing-machine
        - name: ${upper_name} Cycle
          icon: mdi:washing-machine
        - name: ${upper_name} SubState
          icon: mdi:washing-machine
        - name: ${upper_name} End of Cycle
          icon: mdi:alarm-check
        - name: ${upper_name} Soil Setting
          icon: mdi:liquid-spot
        - name: ${upper_name} Temp Setting
          icon: mdi:thermometer
        - name: ${upper_name} Spin Setting
          icon: mdi:autorenew
        - name: ${upper_name} Rinse Setting
          icon: mdi:waves-arrow-up  
        - name: ${upper_name} Door
          icon: mdi:door
        - name: ${upper_name} Door lock
          icon: mdi:door            

#turn on blue led on at boot and back off when connected to wifi
output:
  - platform: gpio
    pin: GPIO2
    id: onboard_led
    inverted: True

interval:
  - interval: 1s
    then:
      if:
        condition:
          wifi.connected:
        then:
          - output.turn_on: onboard_led
        else:
          - output.turn_off: onboard_led

button:
  #HA button to restart.
  - platform: restart
    name: ${upper_name} Restart